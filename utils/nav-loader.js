/*
===========================================
NAVIGATION LOADER
===========================================
This script loads the navigation component and handles active page states.
It ensures consistent navigation across all pages.
*/

class NavigationLoader {
    constructor() {
        this.currentPage = this.getCurrentPage();
        this.navigationManager = null;
        this.initialized = false;
        this.init();
    }
    
    init() {
        this.loadNavigation();
    }
    
    getCurrentPage() {
        const path = window.location.pathname;
        const filename = path.split('/').pop() || 'index.html';
        
        // Map filenames to page identifiers
        const pageMap = {
            'index.html': 'home',
            'blog.html': 'blog',
            'privacy.html': 'privacy',
            'disclaimer.html': 'disclaimer',
            'contact.html': 'contact',
            'cookies.html': 'cookies',
            'podcast.html': 'podcast',
            'streaming.html': 'streaming',
            'top10.html': 'top10',
            '': 'home' // For root path
        };
        
        return pageMap[filename] || 'home';
    }
    
    async loadNavigation() {
        try {
            // Check if navigation already exists (for pages that have it hardcoded)
            const existingNav = document.querySelector('.sticky-nav');
            if (existingNav) {
                this.setActiveStates();
                this.initializeNavigationFunctionality();
                return;
            }
            
            // Embedded navigation HTML (to avoid CORS issues with file:// protocol)
            const navigationHTML = `
<!-- 
===========================================
STICKY NAVIGATION BAR - REUSABLE COMPONENT
===========================================
This navigation stays at the top of the page at all times.
This component ensures consistency across all pages.
Brand settings are managed by Configurations/brand-config.js
-->
<nav class="sticky-nav" id="mainNav">
    <div class="nav-container">
        <!-- Logo Section - Left aligned with proper spacing -->
        <div class="nav-brand">
            <a href="./index.html#home" class="nav-logo">
                <img src="" alt="" class="logo-img" style="display: none;">
                <span class="logo-text" style="display: none;"></span>
            </a>
        </div>
        
        <!-- Navigation Menu - Moved closer to logo -->
        <ul class="nav-menu" id="navMenu">
            <!-- Navigation links will be dynamically generated by nav-config.js -->
        </ul>
        
        <!-- Search Bar Container -->
        <div class="nav-search-container" id="navSearchContainer">
            <div class="nav-search-wrapper">
                <input type="text" class="nav-search-input" id="navSearchInput" placeholder="Search laptops, reviews, guides...">
                <button class="nav-search-close" id="navSearchClose">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <!-- Edit search dropdown options -->
            
            <!-- Search Dropdown -->
            <div class="nav-search-dropdown" id="navSearchDropdown">
                <!-- Popular Searches Section -->
                <div class="search-section">
                    <div class="search-section-title">Popular Searches</div>
                    <div class="popular-searches">
                        <a href="index.html" class="search-option">
                            <span class="icon">üíª</span>
                            <span>Best Gaming Laptops</span>
                        </a>
                        <a href="index.html##editors-choice-review" class="search-option">
                            <span class="icon">üëë</span>
                            <span>Editor's Pick</span>
                        </a>
                        <a href="index.html#editors-choice-review" class="search-option">
                            <span class="icon">üöÄ</span>
                            <span>MacBook Pro M4 Max</span>
                        </a>
                        
                        <a href="index.html#compare" class="search-option">
                            <span class="icon">‚öñÔ∏è</span>
                            <span>Compare Laptops</span>
                        </a>
                    </div>
                </div>
                
                <!-- Quick Navigation Section -->
                <div class="search-section">
                    <div class="search-section-title">Quick Navigation</div>
                    <div class="popular-searches">
                        <a href="top10.html" class="search-option">
                            <span class="icon">üèÜ</span>
                            <span>Top 10 List</span>
                        </a>
                        <a href="blog.html" class="search-option">
                            <span class="icon">üì∞</span>
                            <span>Blog & News</span>
                        </a>
                        <a href="contact.html" class="search-option">
                            <span class="icon">üìû</span>
                            <span>Contact Us</span>
                        </a>
                        <a href="podcast.html" class="search-option">
                            <span class="icon">üéß</span>
                            <span>Podcasts</span>
                        </a>
                        <a href="streaming.html" class="search-option">
                            <span class="icon">üé•</span>
                            <span>Streaming</span>
                        </a>
                        <a href="contact.html#faq" class="search-option">
                            <span class="icon">‚ùì</span>
                            <span>FAQ</span>
                        </a>
                    </div>
                </div>
                
                <!-- Search Results Section (Initially Hidden) -->
                <div class="search-section search-results" id="searchResults">
                    <div class="search-section-title">Search Results</div>
                    <div id="searchResultsList">
                        <!-- Dynamic search results will be inserted here -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Right side controls -->
        <div class="nav-controls">
            <!-- Search Button -->
            <button class="nav-search-btn" id="navSearchBtn">
                <i class="fas fa-search"></i>
            </button>
            
            <!-- Menu Button -->
            <button class="nav-menu-btn" id="navMenuBtn">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </div>
</nav>

<!-- 
===========================================
FULL-SCREEN MENU OVERLAY
===========================================
This overlay appears when the menu button is clicked.
Content is managed via Configurations/menu-config.js
-->
<div class="menu-overlay" id="menuOverlay">
    <div class="menu-container">
        <!-- Menu will be dynamically generated by JavaScript -->
    </div>
</div>`;
            
            // Insert navigation at the beginning of body
            document.body.insertAdjacentHTML('afterbegin', navigationHTML);
            
            // Set active states and initialize functionality after a brief delay to ensure DOM is ready
            setTimeout(() => {
                this.setActiveStates();
                this.initializeNavigationFunctionality();
            }, 150);
            
            console.log('Navigation loaded successfully');
        } catch (error) {
            console.warn('Could not load navigation component:', error);
            // Fallback: still try to set active states if navigation exists
            setTimeout(() => {
                this.setActiveStates();
                this.initializeNavigationFunctionality();
            }, 150);
        }
    }
    
    /**
     * Initialize navigation functionality (search, menu, etc.)
     */
    initializeNavigationFunctionality() {
        // Prevent duplicate initialization
        if (this.initialized) {
            return;
        }
        
        // Check if NavigationManager class is available and there's no existing navigation manager
        if (typeof NavigationManager !== 'undefined' && !window.navigationManager) {
            // Create a new navigation manager instance
            this.navigationManager = new NavigationManager();
            window.navigationManager = this.navigationManager; // Store globally to prevent duplicates
            console.log('Navigation functionality initialized via NavigationManager');
            this.initialized = true;
        } else if (window.navigationManager) {
            // Use existing navigation manager
            this.navigationManager = window.navigationManager;
            console.log('Using existing NavigationManager');
            this.initialized = true;
        } else {
            // Fallback: manually initialize basic functionality
            this.initializeBasicNavigation();
        }
    }
    
    /**
     * Fallback method to initialize basic navigation functionality
     */
    initializeBasicNavigation() {
        // Prevent duplicate initialization
        if (this.initialized) {
            return;
        }
        
        // Initialize search functionality
        this.initializeSearch();
        
        // Initialize menu functionality
        this.initializeMenu();
        
        console.log('Basic navigation functionality initialized');
        this.initialized = true;
    }
    
    /**
     * Initialize search functionality
     */
    initializeSearch() {
        const searchBtn = document.getElementById('navSearchBtn');
        const searchContainer = document.getElementById('navSearchContainer');
        const searchInput = document.getElementById('navSearchInput');
        const searchClose = document.getElementById('navSearchClose');
        
        if (!searchBtn || !searchContainer || !searchInput || !searchClose) return;
        
        // Check if already initialized
        if (searchBtn.hasAttribute('data-initialized')) return;
        
        let isSearchOpen = false;
        
        // Open search when search button is clicked
        searchBtn.addEventListener('click', () => {
            searchContainer.classList.add('active');
            isSearchOpen = true;
            setTimeout(() => searchInput.focus(), 100);
            
            // Show search dropdown
            const searchDropdown = document.getElementById('navSearchDropdown');
            console.log('Search dropdown element (nav-loader):', searchDropdown);
            if (searchDropdown) {
                searchDropdown.classList.add('active');
                console.log('Added active class to dropdown (nav-loader)');
            } else {
                console.log('Search dropdown element not found! (nav-loader)');
            }
        });
        
        // Close search when close button is clicked
        searchClose.addEventListener('click', () => {
            searchContainer.classList.remove('active');
            isSearchOpen = false;
            searchInput.value = '';
            
            // Hide search dropdown and reset sections
            const searchDropdown = document.getElementById('navSearchDropdown');
            if (searchDropdown) {
                searchDropdown.classList.remove('active');
            }
            
            // Reset search sections - show popular searches and quick nav, hide search results
            const searchResults = document.getElementById('searchResults');
            const popularSection = document.querySelector('.search-section:not(.search-results)');
            const quickNavSection = document.querySelector('.search-section:nth-child(2)');
            
            if (searchResults) {
                searchResults.style.display = 'none';
            }
            if (popularSection) {
                popularSection.style.display = 'block';
            }
            if (quickNavSection) {
                quickNavSection.style.display = 'block';
            }
        });
        
        // Close search on escape key
        const escapeHandler = (e) => {
            if (e.key === 'Escape' && isSearchOpen) {
                searchContainer.classList.remove('active');
                isSearchOpen = false;
                searchInput.value = '';
                
                // Hide search dropdown and reset sections
                const searchDropdown = document.getElementById('navSearchDropdown');
                if (searchDropdown) {
                    searchDropdown.classList.remove('active');
                }
                
                // Reset search sections - show popular searches and quick nav, hide search results
                const searchResults = document.getElementById('searchResults');
                const popularSection = document.querySelector('.search-section:not(.search-results)');
                const quickNavSection = document.querySelector('.search-section:nth-child(2)');
                
                if (searchResults) {
                    searchResults.style.display = 'none';
                }
                if (popularSection) {
                    popularSection.style.display = 'block';
                }
                if (quickNavSection) {
                    quickNavSection.style.display = 'block';
                }
            }
        };
        document.addEventListener('keydown', escapeHandler);
        
        // Close search when clicking outside
        const clickHandler = (e) => {
            if (isSearchOpen && !searchContainer.contains(e.target) && !searchBtn.contains(e.target)) {
                searchContainer.classList.remove('active');
                isSearchOpen = false;
                searchInput.value = '';
                
                // Hide search dropdown and reset sections
                const searchDropdown = document.getElementById('navSearchDropdown');
                if (searchDropdown) {
                    searchDropdown.classList.remove('active');
                }
                
                // Reset search sections - show popular searches and quick nav, hide search results
                const searchResults = document.getElementById('searchResults');
                const popularSection = document.querySelector('.search-section:not(.search-results)');
                const quickNavSection = document.querySelector('.search-section:nth-child(2)');
                
                if (searchResults) {
                    searchResults.style.display = 'none';
                }
                if (popularSection) {
                    popularSection.style.display = 'block';
                }
                if (quickNavSection) {
                    quickNavSection.style.display = 'block';
                }
            }
        };
        document.addEventListener('click', clickHandler);
        
        // Mark as initialized
        searchBtn.setAttribute('data-initialized', 'true');
        
        console.log('Search functionality initialized');
    }
    
    /**
     * Initialize menu functionality
     */
    initializeMenu() {
        const menuBtn = document.getElementById('navMenuBtn');
        const menuOverlay = document.getElementById('menuOverlay');
        
        if (!menuBtn || !menuOverlay) return;
        
        // Check if already initialized
        if (menuBtn.hasAttribute('data-initialized')) return;
        
        let isMenuOpen = false;
        
        // Setup menu button click handler
        menuBtn.addEventListener('click', () => {
            if (isMenuOpen) {
                this.closeMenu(menuBtn, menuOverlay);
                isMenuOpen = false;
            } else {
                this.openMenu(menuBtn, menuOverlay);
                isMenuOpen = true;
            }
        });
        
        // Close menu when clicking outside menu container
        const overlayClickHandler = (e) => {
            if (e.target === menuOverlay) {
                this.closeMenu(menuBtn, menuOverlay);
                isMenuOpen = false;
            }
        };
        menuOverlay.addEventListener('click', overlayClickHandler);
        
        // Close menu on escape key
        const escapeHandler = (e) => {
            if (e.key === 'Escape' && isMenuOpen) {
                this.closeMenu(menuBtn, menuOverlay);
                isMenuOpen = false;
            }
        };
        document.addEventListener('keydown', escapeHandler);
        
        // Mark as initialized
        menuBtn.setAttribute('data-initialized', 'true');
        
        console.log('Menu functionality initialized');
    }
    
    /**
     * Open menu
     */
    openMenu(menuBtn, menuOverlay) {
        menuOverlay.classList.add('active');
        
        // Update menu button icon to X
        const icon = menuBtn.querySelector('i');
        if (icon) {
            icon.className = 'fas fa-times';
        }
        
        // Prevent body scroll when menu is open
        document.body.style.overflow = 'hidden';
    }
    
    /**
     * Close menu
     */
    closeMenu(menuBtn, menuOverlay) {
        menuOverlay.classList.remove('active');
        
        // Update menu button icon back to hamburger
        const icon = menuBtn.querySelector('i');
        if (icon) {
            icon.className = 'fas fa-bars';
        }
        
        // Restore body scroll
        document.body.style.overflow = '';
    }
    
    setActiveStates() {
        // Remove existing active classes
        const navLinks = document.querySelectorAll('.nav-link');
        navLinks.forEach(link => link.classList.remove('active'));
        
        // Set active class based on current page
        let activeLink = null;
        
        switch (this.currentPage) {
            case 'blog':
                activeLink = document.querySelector('a[href*="blog.html"].nav-link');
                break;
            case 'privacy':
                activeLink = document.querySelector('a[href*="privacy.html"].nav-link');
                break;
            case 'disclaimer':
                activeLink = document.querySelector('a[href*="disclaimer.html"].nav-link');
                break;
            case 'home':
            default:
                // For home page, make Reviews active since that's the main content
                activeLink = document.querySelector('a[href*="#reviews"].nav-link') || 
                           document.querySelector('.nav-link[href*="index.html"]');
                break;
        }
        
        if (activeLink) {
            activeLink.classList.add('active');
            console.log(`Set active state for ${this.currentPage} page`);
        }
    }
}

// Initialize navigation loader when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new NavigationLoader());
} else {
    new NavigationLoader();
} 